"""
Aplicaci√≥n Streamlit para consumir la API del Complemento de Paternidad
"""

import streamlit as st
import requests
import json
from datetime import datetime, date
import pandas as pd

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Complemento de Paternidad",
    page_icon="üë∂",
    layout="wide",
    initial_sidebar_state="expanded"
)

# URL base de la API
API_BASE_URL = "http://localhost:8000"

def check_api_health():
    """Verificar si la API est√° disponible"""
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=5)
        return response.status_code == 200
    except:
        return False

def main():
    st.title("üçº Calculadora del Complemento de Paternidad")
    st.markdown("---")
    
    # Verificar estado de la API
    if not check_api_health():
        st.error("‚ùå La API no est√° disponible. Aseg√∫rate de que est√© ejecut√°ndose en http://localhost:8000")
        st.stop()
    else:
        st.success("‚úÖ API conectada correctamente")
    
    # Sidebar para navegaci√≥n
    st.sidebar.title("üß≠ Navegaci√≥n")
    opcion = st.sidebar.selectbox(
        "Selecciona una opci√≥n:",
        [
            "üîç Verificar Elegibilidad",
            "üí∞ Calcular Complemento",
            "‚èÆÔ∏è Calcular Atrasos",
            "‚öñÔ∏è Comparar Progenitores",
            "üìä Informaci√≥n del Sistema"
        ]
    )
    
    if opcion == "üîç Verificar Elegibilidad":
        verificar_elegibilidad()
    elif opcion == "üí∞ Calcular Complemento":
        calcular_complemento()
    elif opcion == "‚èÆÔ∏è Calcular Atrasos":
        calcular_atrasos()
    elif opcion == "‚öñÔ∏è Comparar Progenitores":
        comparar_progenitores()
    elif opcion == "üìä Informaci√≥n del Sistema":
        informacion_sistema()

def verificar_elegibilidad():
    st.header("üîç Verificar Elegibilidad")
    st.markdown("Comprueba si cumples los criterios para recibir el complemento")
    
    col1, col2 = st.columns(2)
    
    with col1:
        pension_type = st.selectbox(
            "Tipo de pensi√≥n:",
            ["jubilacion", "incapacidad", "viudedad"],
            help="Selecciona el tipo de pensi√≥n que recibes"
        )
        
        start_date = st.date_input(
            "Fecha de inicio de la pensi√≥n:",
            value=date(2020, 1, 1),
            help="Fecha en que comenzaste a recibir la pensi√≥n"
        )
    
    with col2:
        num_children = st.number_input(
            "N√∫mero de hijos:",
            min_value=1,
            max_value=10,
            value=2,
            help="N√∫mero total de hijos"
        )
    
    if st.button("üîç Verificar Elegibilidad", type="primary"):
        try:
            params = {
                "pension_type": pension_type,
                "start_date": start_date.strftime("%Y-%m-%d"),
                "num_children": num_children
            }
            
            response = requests.get(f"{API_BASE_URL}/eligibility", params=params)
            
            if response.status_code == 200:
                data = response.json()
                
                if data["eligible"]:
                    st.success("‚úÖ ¬°Eres elegible para el complemento!")
                    st.info(f"üìÖ Per√≠odo aplicable: {data['period']}")
                    
                    if data["period"] == "1":
                        st.markdown("**Caracter√≠sticas del Per√≠odo 1 (2016-2021):**")
                        st.markdown("- Solo pensiones de jubilaci√≥n")
                        st.markdown("- C√°lculo porcentual sobre la pensi√≥n")
                        st.markdown("- 2 hijos ‚Üí 2%, 3 hijos ‚Üí 3%, ‚â•4 hijos ‚Üí 15%")
                    else:
                        st.markdown("**Caracter√≠sticas del Per√≠odo 2 (desde 2021):**")
                        st.markdown("- Jubilaci√≥n e incapacidad")
                        st.markdown("- Importe fijo: 35‚Ç¨ por hijo (m√°ximo 4)")
                else:
                    st.error("‚ùå No eres elegible para el complemento")
                    if data["reason"]:
                        st.warning(f"Motivo: {data['reason']}")
            else:
                st.error(f"Error: {response.text}")
                
        except Exception as e:
            st.error(f"Error conectando con la API: {str(e)}")

def calcular_complemento():
    st.header("üí∞ Calcular Complemento")
    st.markdown("Calcula el importe exacto del complemento que te corresponde")
    
    col1, col2 = st.columns(2)
    
    with col1:
        pension_type = st.selectbox(
            "Tipo de pensi√≥n:",
            ["jubilacion", "incapacidad", "viudedad"]
        )
        
        start_date = st.date_input(
            "Fecha de inicio de la pensi√≥n:",
            value=date(2020, 1, 1)
        )
    
    with col2:
        pension_amount = st.number_input(
            "Cuant√≠a de la pensi√≥n (‚Ç¨):",
            min_value=0.0,
            value=1200.0,
            step=10.0,
            help="Importe mensual de tu pensi√≥n en euros"
        )
        
        num_children = st.number_input(
            "N√∫mero de hijos:",
            min_value=1,
            max_value=10,
            value=2
        )
    
    if st.button("üí∞ Calcular Complemento", type="primary"):
        try:
            data = {
                "pension_type": pension_type,
                "start_date": start_date.strftime("%Y-%m-%d"),
                "num_children": num_children,
                "pension_amount": pension_amount
            }
            
            response = requests.post(f"{API_BASE_URL}/calculate", json=data)
            
            if response.status_code == 200:
                result = response.json()
                
                st.success("‚úÖ C√°lculo completado")
                
                # Mostrar resultados en columnas
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("üí∞ Complemento Mensual", f"{result['amount']:.2f}‚Ç¨")
                
                with col2:
                    st.metric("üìÖ Per√≠odo", result['period'])
                
                with col3:
                    st.metric("üíµ Pensi√≥n Total", f"{result['pension_with_complement']:.2f}‚Ç¨")
                
                # Detalles adicionales
                st.markdown("### üìã Detalles del c√°lculo:")
                
                details_col1, details_col2 = st.columns(2)
                
                with details_col1:
                    st.markdown("**üìä Informaci√≥n b√°sica:**")
                    st.write(f"‚Ä¢ N√∫mero de hijos: {num_children}")
                    st.write(f"‚Ä¢ Pensi√≥n base: {pension_amount:.2f}‚Ç¨")
                    st.write(f"‚Ä¢ Tipo de pensi√≥n: {pension_type}")
                
                with details_col2:
                    st.markdown("**üßÆ C√°lculo aplicado:**")
                    if result['period'] == "1":
                        if result.get('complement_percent'):
                            st.write(f"‚Ä¢ Porcentaje aplicado: {result['complement_percent']:.1f}%")
                        st.write(f"‚Ä¢ C√°lculo: porcentual sobre pensi√≥n")
                    else:
                        if result.get('complement_fixed'):
                            st.write(f"‚Ä¢ Importe fijo por hijo: {result['complement_fixed']:.2f}‚Ç¨")
                        st.write(f"‚Ä¢ C√°lculo: importe fijo √ó hijos")
                
                # Mostrar JSON completo en un expander
                with st.expander("üîç Ver respuesta completa de la API"):
                    st.json(result)
                
            else:
                st.error(f"Error: {response.text}")
                
        except Exception as e:
            st.error(f"Error conectando con la API: {str(e)}")

def calcular_atrasos():
    st.header("‚èÆÔ∏è Calcular Atrasos")
    st.markdown("Calcula el total de atrasos acumulados entre dos fechas")
    
    col1, col2 = st.columns(2)
    
    with col1:
        start_date = st.date_input(
            "Fecha de inicio del per√≠odo:",
            value=date(2021, 4, 1),
            help="Fecha desde la que quieres calcular los atrasos"
        )
        
        pension_amount = st.number_input(
            "Cuant√≠a de la pensi√≥n (‚Ç¨):",
            min_value=0.0,
            value=1000.0,
            step=10.0
        )
    
    with col2:
        end_date = st.date_input(
            "Fecha de fin del per√≠odo:",
            value=date.today(),
            help="Fecha hasta la que quieres calcular los atrasos"
        )
        
        num_children = st.number_input(
            "N√∫mero de hijos:",
            min_value=1,
            max_value=10,
            value=2
        )
    
    if st.button("‚èÆÔ∏è Calcular Atrasos", type="primary"):
        try:
            params = {
                "start_date": start_date.strftime("%Y-%m-%d"),
                "end_date": end_date.strftime("%Y-%m-%d"),
                "pension_amount": pension_amount,
                "num_children": num_children
            }
            
            response = requests.get(f"{API_BASE_URL}/retroactive", params=params)
            
            if response.status_code == 200:
                result = response.json()
                
                st.success("‚úÖ C√°lculo de atrasos completado")
                
                # M√©tricas principales
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("üí∞ Total Atrasos", f"{result['total_amount']:.2f}‚Ç¨")
                
                with col2:
                    st.metric("üìÖ Meses calculados", result['months_calculated'])
                
                with col3:
                    st.metric("üóìÔ∏è Per√≠odo", f"{start_date} - {end_date}")
                
                # Desglose por per√≠odos si est√° disponible
                if 'periods' in result:
                    st.markdown("### üìä Desglose por per√≠odos:")
                    
                    periods_data = []
                    for period in result['periods']:
                        periods_data.append({
                            'Per√≠odo': period['period'],
                            'Meses': period['months'],
                            'Importe (‚Ç¨)': f"{period['amount']:.2f}"
                        })
                    
                    df = pd.DataFrame(periods_data)
                    st.dataframe(df, use_container_width=True)
                
            else:
                st.error(f"Error: {response.text}")
                
        except Exception as e:
            st.error(f"Error conectando con la API: {str(e)}")

def comparar_progenitores():
    st.header("‚öñÔ∏è Comparar Progenitores")
    st.markdown("Determina cu√°l de los dos progenitores tiene derecho al complemento")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üë§ Progenitor 1")
        name1 = st.text_input("Nombre:", value="Mar√≠a Garc√≠a", key="name1")
        pension_amount1 = st.number_input("Cuant√≠a pensi√≥n (‚Ç¨):", value=1200.0, key="amount1")
        pension_start1 = st.date_input("Fecha inicio pensi√≥n:", value=date(2020, 1, 15), key="start1")
        num_children1 = st.number_input("N√∫mero de hijos:", value=2, min_value=1, key="children1")
        pension_type1 = st.selectbox("Tipo de pensi√≥n:", ["jubilacion", "incapacidad", "viudedad"], key="type1")
    
    with col2:
        st.subheader("üë§ Progenitor 2")
        name2 = st.text_input("Nombre:", value="Juan L√≥pez", key="name2")
        pension_amount2 = st.number_input("Cuant√≠a pensi√≥n (‚Ç¨):", value=800.0, key="amount2")
        pension_start2 = st.date_input("Fecha inicio pensi√≥n:", value=date(2019, 6, 10), key="start2")
        num_children2 = st.number_input("N√∫mero de hijos:", value=2, min_value=1, key="children2")
        pension_type2 = st.selectbox("Tipo de pensi√≥n:", ["jubilacion", "incapacidad", "viudedad"], key="type2")
    
    if st.button("‚öñÔ∏è Comparar Progenitores", type="primary"):
        try:
            data = {
                "progenitor_1": {
                    "name": name1,
                    "pension_amount": pension_amount1,
                    "start_date": pension_start1.strftime("%Y-%m-%d"),
                    "num_children": num_children1,
                    "pension_type": pension_type1
                },
                "progenitor_2": {
                    "name": name2,
                    "pension_amount": pension_amount2,
                    "start_date": pension_start2.strftime("%Y-%m-%d"),
                    "num_children": num_children2,
                    "pension_type": pension_type2
                }
            }
            
            response = requests.post(f"{API_BASE_URL}/compare", json=data)
            
            if response.status_code == 200:
                result = response.json()
                
                st.success("‚úÖ Comparaci√≥n completada")
                
                # Resultado principal
                winner = result['eligible_progenitor']
                st.info(f"üèÜ **{winner}** tiene derecho al complemento")
                
                # Explicaci√≥n
                if result.get('explanation'):
                    st.markdown(f"**Motivo:** {result['explanation']}")
                
                # Detalles de cada progenitor
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("### üë§ Progenitor 1")
                    if 'progenitor_1' in result:
                        prog1 = result['progenitor_1']
                        st.write(f"**Nombre:** {prog1['name']}")
                        st.write(f"**Elegible:** {'‚úÖ S√≠' if prog1['eligible'] else '‚ùå No'}")
                        if prog1.get('complement_amount'):
                            st.write(f"**Complemento:** {prog1['complement_amount']:.2f}‚Ç¨")
                        if prog1.get('total_pension'):
                            st.write(f"**Pensi√≥n total:** {prog1['total_pension']:.2f}‚Ç¨")
                
                with col2:
                    st.markdown("### üë§ Progenitor 2")
                    if 'progenitor_2' in result:
                        prog2 = result['progenitor_2']
                        st.write(f"**Nombre:** {prog2['name']}")
                        st.write(f"**Elegible:** {'‚úÖ S√≠' if prog2['eligible'] else '‚ùå No'}")
                        if prog2.get('complement_amount'):
                            st.write(f"**Complemento:** {prog2['complement_amount']:.2f}‚Ç¨")
                        if prog2.get('total_pension'):
                            st.write(f"**Pensi√≥n total:** {prog2['total_pension']:.2f}‚Ç¨")
                
                # Mostrar respuesta completa en expander
                with st.expander("üîç Ver respuesta completa de la API"):
                    st.json(result)
                
            else:
                st.error(f"Error: {response.text}")
                
        except Exception as e:
            st.error(f"Error conectando con la API: {str(e)}")

def informacion_sistema():
    st.header("üìä Informaci√≥n del Sistema")
    
    # Health check
    try:
        response = requests.get(f"{API_BASE_URL}/health")
        if response.status_code == 200:
            health_data = response.json()
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("Estado", health_data["status"])
            
            with col2:
                st.metric("Versi√≥n", health_data["version"])
            
            with col3:
                timestamp = health_data["timestamp"].replace('Z', '+00:00')
                st.metric("√öltima verificaci√≥n", timestamp[:19])
            
            st.success("‚úÖ API funcionando correctamente")
            
        else:
            st.error("‚ùå Error en la API")
            
    except Exception as e:
        st.error(f"Error conectando con la API: {str(e)}")
    
    # Informaci√≥n sobre los per√≠odos
    st.markdown("---")
    st.markdown("### üìÖ Informaci√≥n sobre los per√≠odos de aplicaci√≥n")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üóìÔ∏è Per√≠odo 1 (01/01/2016 - 03/02/2021)")
        st.markdown("- Solo pensiones de **jubilaci√≥n**")
        st.markdown("- C√°lculo **porcentual** sobre la pensi√≥n")
        st.markdown("- 2 hijos ‚Üí 2% adicional")
        st.markdown("- 3 hijos ‚Üí 3% adicional")
        st.markdown("- ‚â•4 hijos ‚Üí 15% adicional")
    
    with col2:
        st.markdown("#### üóìÔ∏è Per√≠odo 2 (desde 01/04/2021)")
        st.markdown("- Pensiones de **jubilaci√≥n e incapacidad**")
        st.markdown("- Importe **fijo** por hijo")
        st.markdown("- 35‚Ç¨ por hijo (m√°ximo 4 hijos)")
        st.markdown("- Solo un complemento si hay derecho a ambos")

if __name__ == "__main__":
    main()